import{s as is,e as j,t as C,a as v,c as L,b as N,d as w,f as p,g as k,r as ts,i as y,h as b,j as rs,k as ys,y as K,n as ps}from"../chunks/scheduler.DVJ5f9KL.js";import{S as Ds,i as fs,b as E,d as g,m as h,a as A,t as _,e as x}from"../chunks/index.DN6r8AR1.js";import{C as M}from"../chunks/CodeFence.DGyJ5_c7.js";import{C as es}from"../chunks/CodeInline.C4g844MT.js";/* empty css                                                         */import{A as ns}from"../chunks/Admonition.CE_jry0p.js";import"../chunks/entry.BAdUWoBd.js";import{L as cs}from"../chunks/Link.B3UGMjDV.js";import{f as us}from"../chunks/kit-docs.DjVNc1hD.js";function $s(F){let t;return{c(){t=C("#")},l(e){t=w(e,"#")},m(e,r){y(e,t,r)},d(e){e&&p(t)}}}function ms(F){let t,e,r,n="always",D,f,B,u;return f=new es({props:{code:"@e[tag=aj.global.root]"}}),{c(){t=j("p"),e=C("You should "),r=j("em"),r.textContent=n,D=C(" replace the example "),E(f.$$.fragment),B=C(" selector with a more specific selector.")},l(l){t=L(l,"P",{});var i=N(t);e=w(i,"You should "),r=L(i,"EM",{"data-svelte-h":!0}),K(r)!=="svelte-x3mkar"&&(r.textContent=n),D=w(i," replace the example "),g(f.$$.fragment,i),B=w(i," selector with a more specific selector."),i.forEach(p)},m(l,i){y(l,t,i),b(t,e),b(t,r),b(t,D),h(f,t,null),b(t,B),u=!0},p:ps,i(l){u||(A(f.$$.fragment,l),u=!0)},o(l){_(f.$$.fragment,l),u=!1},d(l){l&&p(t),x(f)}}}function Fs(F){let t,e="Execute at a specific locator's position",r,n,D,f="Then, using the locator's position data, we can now execute commands at that position with macros:",B,u,l,i;return n=new M({props:{title:"foo/as_root.mcfunction ",lang:"python",ext:"py",linesCount:11,rawCode:`execute \\
    # Get the root entity context
    as @e[tag=aj.global.root] at @s \\
    # Execute the command on the root entity's passengers
    on passengers \\
    # Filter out the data entity from the passengers
    if entity @s[tag=aj.global.data] \\
run \\
  # Run our position function with the Locator's position data
  function foo:position with entity @s data.locators.<locator_name>
`,showCopyCode:!0,code:`<pre class="shiki " style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #BABED8">execute </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic"># Get the root entity context</span></span>
<span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">as</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #BABED8">e</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">tag=aj</span><span style="color: #89DDFF">.</span><span style="color: #89DDFF; font-style: italic">global</span><span style="color: #89DDFF">.</span><span style="color: #F07178">root</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> at </span><span style="color: #89DDFF">@</span><span style="color: #BABED8">s </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic"># Execute the command on the root entity&#39;s passengers</span></span>
<span class="line"><span style="color: #BABED8">    on passengers </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic"># Filter out the data entity from the passengers</span></span>
<span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> entity </span><span style="color: #89DDFF">@</span><span style="color: #BABED8">s</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">tag=aj</span><span style="color: #89DDFF">.</span><span style="color: #89DDFF; font-style: italic">global</span><span style="color: #89DDFF">.</span><span style="color: #F07178">data</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">run </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic"># Run our position function with the Locator&#39;s position data</span></span>
<span class="line"><span style="color: #BABED8">  function foo</span><span style="color: #89DDFF">:</span><span style="color: #BABED8">position </span><span style="color: #89DDFF; font-style: italic">with</span><span style="color: #BABED8"> entity </span><span style="color: #89DDFF">@</span><span style="color: #BABED8">s data</span><span style="color: #89DDFF">.</span><span style="color: #F07178">locators</span><span style="color: #89DDFF">.&lt;</span><span style="color: #BABED8">locator_name</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"></span></code></pre>`}}),u=new M({props:{title:"foo/position.mcfunction ",lang:"rust",ext:"rs",linesCount:2,rawCode:`$execute positioned ^$(posx) ^$(posy) ^$(posz) rotated ~$(roty) ~$(rotx) run ...
`,showCopyCode:!0,code:`<pre class="shiki " style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #89DDFF">$</span><span style="color: #BABED8">execute positioned </span><span style="color: #89DDFF">^$(</span><span style="color: #BABED8">posx</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">^$(</span><span style="color: #BABED8">posy</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">^$(</span><span style="color: #BABED8">posz</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> rotated ~</span><span style="color: #89DDFF">$(</span><span style="color: #BABED8">roty</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> ~</span><span style="color: #89DDFF">$(</span><span style="color: #BABED8">rotx</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> run </span><span style="color: #89DDFF">...</span></span>
<span class="line"></span></code></pre>`}}),l=new ns({props:{type:"note",$$slots:{default:[ms]},$$scope:{ctx:F}}}),{c(){t=j("p"),t.textContent=e,r=v(),E(n.$$.fragment),D=j("p"),D.textContent=f,B=v(),E(u.$$.fragment),E(l.$$.fragment)},l(a){t=L(a,"P",{"data-svelte-h":!0}),K(t)!=="svelte-gpipfk"&&(t.textContent=e),r=k(a),g(n.$$.fragment,a),D=L(a,"P",{"data-svelte-h":!0}),K(D)!=="svelte-9lcyre"&&(D.textContent=f),B=k(a),g(u.$$.fragment,a),g(l.$$.fragment,a)},m(a,$){y(a,t,$),y(a,r,$),h(n,a,$),y(a,D,$),y(a,B,$),h(u,a,$),h(l,a,$),i=!0},p(a,$){const m={};$&2&&(m.$$scope={dirty:$,ctx:a}),l.$set(m)},i(a){i||(A(n.$$.fragment,a),A(u.$$.fragment,a),A(l.$$.fragment,a),i=!0)},o(a){_(n.$$.fragment,a),_(u.$$.fragment,a),_(l.$$.fragment,a),i=!1},d(a){a&&(p(t),p(r),p(D),p(B)),x(n,a),x(u,a),x(l,a)}}}function Bs(F){let t,e="Execute as a specific locator's entity",r,n,D,f,B,u,l,i,a="Then, using the locator's UUID, we can now execute commands as that entity with macros:",$,m,U;return f=new es({props:{code:"Use Entity"}}),l=new M({props:{title:"foo/as_root.mcfunction ",lang:"python",ext:"py",linesCount:11,rawCode:`execute \\
  # Get the root entity context
  as @e[tag=aj.global.root] at @s \\
  # Execute the command on the root entity's passengers
  on passengers \\
  # Filter out the data entity from the passengers
  if entity @s[tag=aj.global.data] \\
run \\
  # Run our select function with the Locator's UUID
  function foo:select with entity @s data.locators.<locator_name>
`,showCopyCode:!0,code:`<pre class="shiki " style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #BABED8">execute </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic"># Get the root entity context</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF; font-style: italic">as</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #BABED8">e</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">tag=aj</span><span style="color: #89DDFF">.</span><span style="color: #89DDFF; font-style: italic">global</span><span style="color: #89DDFF">.</span><span style="color: #F07178">root</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> at </span><span style="color: #89DDFF">@</span><span style="color: #BABED8">s </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic"># Execute the command on the root entity&#39;s passengers</span></span>
<span class="line"><span style="color: #BABED8">  on passengers </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic"># Filter out the data entity from the passengers</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> entity </span><span style="color: #89DDFF">@</span><span style="color: #BABED8">s</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">tag=aj</span><span style="color: #89DDFF">.</span><span style="color: #89DDFF; font-style: italic">global</span><span style="color: #89DDFF">.</span><span style="color: #F07178">data</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">run </span><span style="color: #89DDFF">\\</span></span>
<span class="line"><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic"># Run our select function with the Locator&#39;s UUID</span></span>
<span class="line"><span style="color: #BABED8">  function foo</span><span style="color: #89DDFF">:</span><span style="color: #BABED8">select </span><span style="color: #89DDFF; font-style: italic">with</span><span style="color: #BABED8"> entity </span><span style="color: #89DDFF">@</span><span style="color: #BABED8">s data</span><span style="color: #89DDFF">.</span><span style="color: #F07178">locators</span><span style="color: #89DDFF">.&lt;</span><span style="color: #BABED8">locator_name</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"></span></code></pre>`}}),m=new M({props:{title:"foo/select.mcfunction ",lang:"rust",ext:"rs",linesCount:2,rawCode:`$execute as $(uuid) run ...
`,showCopyCode:!0,code:`<pre class="shiki " style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #89DDFF">$</span><span style="color: #BABED8">execute </span><span style="color: #F78C6C">as</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">$(</span><span style="color: #BABED8">uuid</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> run </span><span style="color: #89DDFF">...</span></span>
<span class="line"></span></code></pre>`}}),{c(){t=j("p"),t.textContent=e,r=v(),n=j("p"),D=C("Note that this method will only work if you have the Locator's "),E(f.$$.fragment),B=C(" config option enabled."),u=v(),E(l.$$.fragment),i=j("p"),i.textContent=a,$=v(),E(m.$$.fragment)},l(o){t=L(o,"P",{"data-svelte-h":!0}),K(t)!=="svelte-8gexw3"&&(t.textContent=e),r=k(o),n=L(o,"P",{});var d=N(n);D=w(d,"Note that this method will only work if you have the Locator's "),g(f.$$.fragment,d),B=w(d," config option enabled."),d.forEach(p),u=k(o),g(l.$$.fragment,o),i=L(o,"P",{"data-svelte-h":!0}),K(i)!=="svelte-1ih77en"&&(i.textContent=a),$=k(o),g(m.$$.fragment,o)},m(o,d){y(o,t,d),y(o,r,d),y(o,n,d),b(n,D),h(f,n,null),b(n,B),y(o,u,d),h(l,o,d),y(o,i,d),y(o,$,d),h(m,o,d),U=!0},p:ps,i(o){U||(A(f.$$.fragment,o),A(l.$$.fragment,o),A(m.$$.fragment,o),U=!0)},o(o){_(f.$$.fragment,o),_(l.$$.fragment,o),_(m.$$.fragment,o),U=!1},d(o){o&&(p(t),p(r),p(n),p(u),p(i),p($)),x(f),x(l,o),x(m,o)}}}function ds(F){let t;return{c(){t=C("#")},l(e){t=w(e,"#")},m(e,r){y(e,t,r)},d(e){e&&p(t)}}}function Es(F){let t,e,r;return t=new M({props:{title:"foo/as_root.mcfunction ",lang:"rust",ext:"rs",linesCount:4,rawCode:`execute as @e[tag=aj.global.root] run \\
  function animated_java:<export_namespace>/as_own_locator_entities \\
    {command:'function foo:as_locator'}
`,showCopyCode:!0,code:`<pre class="shiki " style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #BABED8">execute </span><span style="color: #F78C6C">as</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #BABED8">e</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">tag</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">aj</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">global</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">root</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> run \\</span></span>
<span class="line"><span style="color: #BABED8">  function animated_java</span><span style="color: #89DDFF">:&lt;</span><span style="color: #BABED8">export_namespace</span><span style="color: #89DDFF">&gt;/</span><span style="color: #BABED8">as_own_locator_entities \\</span></span>
<span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">{</span><span style="color: #BABED8">command</span><span style="color: #89DDFF">:&#39;</span><span style="color: #FFCB6B">function</span><span style="color: #BABED8"> foo</span><span style="color: #89DDFF">:</span><span style="color: #BABED8">as_locator</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">}</span></span>
<span class="line"></span></code></pre>`}}),e=new M({props:{title:"foo/as_locator.mcfunction ",lang:"rust",ext:"rs",linesCount:2,rawCode:`say Hello, World!
`,showCopyCode:!0,code:`<pre class="shiki " style="background-color: #fff" tabindex="0"><code><span class="line"><span style="color: #BABED8">say </span><span style="color: #FFCB6B">Hello</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">World!</span></span>
<span class="line"></span></code></pre>`}}),{c(){E(t.$$.fragment),E(e.$$.fragment)},l(n){g(t.$$.fragment,n),g(e.$$.fragment,n)},m(n,D){h(t,n,D),h(e,n,D),r=!0},p:ps,i(n){r||(A(t.$$.fragment,n),A(e.$$.fragment,n),r=!0)},o(n){_(t.$$.fragment,n),_(e.$$.fragment,n),r=!1},d(n){x(t,n),x(e,n)}}}function gs(F){let t,e=F[0].title+"",r,n,D,f=F[0].description+"",B,u,l,i,a,$,m,U,o,d,Q,I,V,R,X,P,Y,as,Z,H,os,T,ls,ss,G,S;return i=new cs({props:{class:"header-anchor",href:"#excuting-commands-using-locator-offset-data","aria-hidden":"true",$$slots:{default:[$s]},$$scope:{ctx:F}}}),o=new es({props:{code:"data.locators.<locator_name>"}}),I=new ns({props:{type:"info",title:"Example",$$slots:{default:[Fs]},$$scope:{ctx:F}}}),R=new ns({props:{type:"info",title:"Example",$$slots:{default:[Bs]},$$scope:{ctx:F}}}),Y=new cs({props:{class:"header-anchor",href:"#executing-commands-as-locator-entities","aria-hidden":"true",$$slots:{default:[ds]},$$scope:{ctx:F}}}),T=new es({props:{code:"as_own_locator_entities"}}),G=new ns({props:{type:"info",title:"Example",$$slots:{default:[Es]},$$scope:{ctx:F}}}),{c(){t=j("h1"),r=C(e),n=v(),D=j("p"),B=C(f),u=v(),l=j("h2"),E(i.$$.fragment),a=C(" Excuting Commands using Locator Offset Data"),$=v(),m=j("p"),U=C("You can execute commands at a specific locator's position / rotation using the data entity's "),E(o.$$.fragment),d=C(" NBT."),Q=v(),E(I.$$.fragment),V=v(),E(R.$$.fragment),X=v(),P=j("h2"),E(Y.$$.fragment),as=C(" Executing Commands as Locator Entities"),Z=v(),H=j("p"),os=C("You can use the "),E(T.$$.fragment),ls=C(" function to execute commands as all of a Rig Instance's locator entities."),ss=v(),E(G.$$.fragment),this.h()},l(s){t=L(s,"H1",{});var c=N(t);r=w(c,e),c.forEach(p),n=k(s),D=L(s,"P",{});var J=N(D);B=w(J,f),J.forEach(p),u=k(s),l=L(s,"H2",{id:!0,tabindex:!0});var W=N(l);g(i.$$.fragment,W),a=w(W," Excuting Commands using Locator Offset Data"),W.forEach(p),$=k(s),m=L(s,"P",{});var z=N(m);U=w(z,"You can execute commands at a specific locator's position / rotation using the data entity's "),g(o.$$.fragment,z),d=w(z," NBT."),z.forEach(p),Q=k(s),g(I.$$.fragment,s),V=k(s),g(R.$$.fragment,s),X=k(s),P=L(s,"H2",{id:!0,tabindex:!0});var q=N(P);g(Y.$$.fragment,q),as=w(q," Executing Commands as Locator Entities"),q.forEach(p),Z=k(s),H=L(s,"P",{});var O=N(H);os=w(O,"You can use the "),g(T.$$.fragment,O),ls=w(O," function to execute commands as all of a Rig Instance's locator entities."),O.forEach(p),ss=k(s),g(G.$$.fragment,s),this.h()},h(){ts(l,"id","excuting-commands-using-locator-offset-data"),ts(l,"tabindex","-1"),ts(P,"id","executing-commands-as-locator-entities"),ts(P,"tabindex","-1")},m(s,c){y(s,t,c),b(t,r),y(s,n,c),y(s,D,c),b(D,B),y(s,u,c),y(s,l,c),h(i,l,null),b(l,a),y(s,$,c),y(s,m,c),b(m,U),h(o,m,null),b(m,d),y(s,Q,c),h(I,s,c),y(s,V,c),h(R,s,c),y(s,X,c),y(s,P,c),h(Y,P,null),b(P,as),y(s,Z,c),y(s,H,c),b(H,os),h(T,H,null),b(H,ls),y(s,ss,c),h(G,s,c),S=!0},p(s,[c]){(!S||c&1)&&e!==(e=s[0].title+"")&&rs(r,e),(!S||c&1)&&f!==(f=s[0].description+"")&&rs(B,f);const J={};c&2&&(J.$$scope={dirty:c,ctx:s}),i.$set(J);const W={};c&2&&(W.$$scope={dirty:c,ctx:s}),I.$set(W);const z={};c&2&&(z.$$scope={dirty:c,ctx:s}),R.$set(z);const q={};c&2&&(q.$$scope={dirty:c,ctx:s}),Y.$set(q);const O={};c&2&&(O.$$scope={dirty:c,ctx:s}),G.$set(O)},i(s){S||(A(i.$$.fragment,s),A(o.$$.fragment,s),A(I.$$.fragment,s),A(R.$$.fragment,s),A(Y.$$.fragment,s),A(T.$$.fragment,s),A(G.$$.fragment,s),S=!0)},o(s){_(i.$$.fragment,s),_(o.$$.fragment,s),_(I.$$.fragment,s),_(R.$$.fragment,s),_(Y.$$.fragment,s),_(T.$$.fragment,s),_(G.$$.fragment,s),S=!1},d(s){s&&(p(t),p(n),p(D),p(u),p(l),p($),p(m),p(Q),p(V),p(X),p(P),p(Z),p(H),p(ss)),x(i),x(o),x(I,s),x(R,s),x(Y),x(T),x(G,s)}}}function hs(F,t,e){let r;return ys(F,us,n=>e(0,r=n)),[r]}class Ls extends Ds{constructor(t){super(),fs(this,t,hs,gs,is,{})}}export{Ls as component};
